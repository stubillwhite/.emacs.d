(ert-deftest sbw/value-eq-given-nil-then-true ()
  (should (eq (sbw/value-eq nil nil) t)))

(ert-deftest sbw/value-eq-given-strings-then-true-if-equal ()
  (should (eq (sbw/value-eq "foo" "foo") t))
  (should (eq (sbw/value-eq "foo" "bar") nil))
  (should (eq (sbw/value-eq "foo" nil)   nil))
  (should (eq (sbw/value-eq "foo" :foo)  nil)))

(ert-deftest sbw/value-eq-given-keywords-then-true-if-equal ()
  (should (eq (sbw/value-eq :foo :foo) t))
  (should (eq (sbw/value-eq :foo :bar) nil))
  (should (eq (sbw/value-eq :foo nil)  nil))
  (should (eq (sbw/value-eq :foo 23)   nil)))

(ert-deftest sbw/value-eq-given-number-then-true-if-equal ()
  (should (eq (sbw/value-eq 23 23)              t))
  (should (eq (sbw/value-eq 23 42)              nil))
  (should (eq (sbw/value-eq 23 nil)             nil))
  (should (eq (sbw/value-eq 23 (sbw/ht-create)) nil)))

(ert-deftest sbw/value-eq-given-hash-table-then-true-if-equal ()
  (should (eq (sbw/value-eq (sbw/ht-create)                 (sbw/ht-create))                         t))
  (should (eq (sbw/value-eq (sbw/ht-create :foo 23 :bar 42) (sbw/ht-create :foo 23 :bar 42))         t))
  (should (eq (sbw/value-eq (sbw/ht-create :foo 23 :bar 42) (sbw/ht-create :foo 42 :bar 23))         nil))
  (should (eq (sbw/value-eq (sbw/ht-create :foo 23 :bar 42) (sbw/ht-create :foo 23 :bar 42 :baz 13)) nil))
  (should (eq (sbw/value-eq (sbw/ht-create)                 nil)                                     nil))
  (should (eq (sbw/value-eq (sbw/ht-create)                 (list))                                  nil)))

(ert-deftest sbw/value-eq-given-list-then-true-if-equal ()
  (should (eq (sbw/value-eq (list)    (list))       t))
  (should (eq (sbw/value-eq (list 23) (list 23))    t))
  (should (eq (sbw/value-eq (list 23) (list 42))    nil))
  (should (eq (sbw/value-eq (list 23) (list 23 42)) nil))
  (should (eq (sbw/value-eq (list 23) nil)          nil))
  (should (eq (sbw/value-eq (list 23) (vector 23))  nil)))

(ert-deftest sbw/value-eq-given-vector-then-true-if-equal ()
  (should (eq (sbw/value-eq (vector)    (vector))       t))
  (should (eq (sbw/value-eq (vector 23) (vector 23))    t))
  (should (eq (sbw/value-eq (vector 23) (vector 42))    nil))
  (should (eq (sbw/value-eq (vector 23) (vector 23 42)) nil))
  (should (eq (sbw/value-eq (vector 23) nil)            nil))
  (should (eq (sbw/value-eq (vector 23) "23")           nil)))

(ert-deftest sbw/value-eq-given-mixed-type-structures-then-true-if-equal ()
  (let* ( (equal-one (sbw/ht-create (sbw/ht-create :foo 23) (list 1 2 3 "4")))
          (equal-two (sbw/ht-create (sbw/ht-create :foo 23) (list 1 2 3 "4")))
          (different (sbw/ht-create (sbw/ht-create :bar 23) (list 1 2 3 "4"))) )
    (should (eq (sbw/value-eq equal-one equal-two) t))
    (should (eq (sbw/value-eq equal-one different) nil))
    (should (eq (sbw/value-eq equal-two different) nil))))
